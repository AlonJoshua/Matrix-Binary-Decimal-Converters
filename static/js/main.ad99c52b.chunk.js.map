{"version":3,"sources":["Components/BinaryInput.js","Components/DecimalInput.js","Components/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["BinaryInput","props","id","type","placeholder","onChange","this","onBinInputChange","value","onClick","resetBinaryInput","target","style","color","decimal","Component","DecimalInput","onDecInputChange","resetDecimalInput","binary","Canvas","mdr","refs","canvas","display","position","zIndex","top","left","width","height","ctx","getContext","window","innerHeight","innerWidth","columns","drops","x","requestAnimationFrame","draw","fillStyle","fillRect","font","fontSize","i","length","text","Math","floor","random","fillText","setInterval","ref","App","event","input","document","getElementById","setState","eventString","validArray","split","splice","join","bin","index","parseInt","pow","eventArray","match","Number","console","log","push","every","e","pop","rem","unshift","state","href","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ad99c52b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass BinaryInput extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t}\r\n\trender() {\r\n\treturn (\r\n\t\t\t<div id='binary-input'>\r\n\t\t\t<h2 id='bin-dec-title'>Bin to Dec</h2>\r\n\t\t\t<input\r\n\t\t\t id='bin-number'\r\n\t\t\t type='text'\r\n\t\t\t placeholder='binary only'\r\n\t\t\t onChange={this.props.onBinInputChange}\r\n\t\t\t >\r\n\t\t\t </input>\r\n\t\t\t <button\r\n     \t\t type='reset'\r\n    \t\t value='Reset'\r\n    \t\t id='reset-bin'\r\n    \t\t onClick={() => {\r\n    \t    \tthis.props.resetBinaryInput({target: {value: '0'}})\r\n    \t\t  }}\r\n   \t\t     >\r\n    \t\t Reset\r\n   \t\t     </button>\r\n   \t\t     <div \r\n\t\t\t  id='bin-output'\r\n\t\t\t  style={{color: 'white'}}\r\n\t\t\t >\r\n\t\t\t <p>{this.props.decimal}</p>\r\n\t\t\t </div>\r\n\t\t\t </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default BinaryInput;","import React, {Component} from 'react';\r\n\r\nclass DecimalInput extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t}\r\n\trender() {\r\n\treturn (\r\n\t\t\t<div id='decimal-input'>\r\n\t\t\t<h2 id='dec-bin-title'>Dec to Bin</h2>\r\n\t\t\t<input\r\n\t\t\t id='dec-number'\r\n\t\t\t type='text'\r\n\t\t\t placeholder='positive numbers'\r\n\t\t\t onChange={this.props.onDecInputChange}\r\n\t\t\t >\r\n\t\t\t </input>\r\n\t\t\t <button\r\n     \t\t type='reset'\r\n    \t\t value='Reset'\r\n    \t\t id='reset-dec'\r\n    \t\t \r\n    \t\t onClick={() => {\r\n    \t    \tthis.props.resetDecimalInput({target: {value: '0'}})\r\n    \t\t  }}\r\n   \t\t     >\r\n    \t\t Reset\r\n   \t\t     </button>\r\n   \t\t     <div \r\n\t\t\t  id='decimal-output'\r\n\t\t\t  style={{color: 'white'}}\r\n\t\t\t >\r\n\t\t\t <p>{this.props.binary}</p>\r\n\t\t\t </div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\t\r\n\r\nexport default DecimalInput;","import React, { Component } from 'react';\r\n\r\nclass Canvas extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst mdr = this.refs.canvas;\r\n\t\tmdr.id = 'mdr';\r\n\t\tmdr.style.display = 'block';\r\n\t\tmdr.style.position = 'fixed';\r\n\t\tmdr.style.zIndex = '-1';\r\n\t\tmdr.position = 'fixed';\r\n\t\tmdr.style.top = '0';\r\n\t\tmdr.style.left = '0';\r\n\t\tmdr.style.width = '100%';\r\n\t\tmdr.style.height = '100%';\r\n\r\n\t\tconst ctx = mdr.getContext('2d');\r\n\t\tmdr.height = window.innerHeight;\r\n\t\tmdr.width = window.innerWidth;\r\n\r\n\t\tconst binary = '101010';\r\n\r\n\t\tconst fontSize = 25;\r\n\t\tconst columns = mdr.width/fontSize;\r\n\r\n\t\tlet drops = [];\r\n\r\n\t\tfor (let x = 0; x < columns; x++) {\r\n\t\t\tdrops[x] = 200;\r\n\t\t}\r\n\r\n\t\twindow.requestAnimationFrame(() => {\r\n\t\t\tmdr.height = window.innerHeight;\r\n\t\t\tmdr.width = window.innerWidth;\r\n\t\t\tconst columns = mdr.width/fontSize;\r\n\t\t\tfor (let x = 0; x < columns; x++) {\r\n\t\t\tdrops[x] = 200;\r\n\t\t   }\r\n\t\t})\r\n\r\n\t\tconst draw = () => {\r\n\t\t\tctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n\t\t\tctx.fillRect(0, 0, mdr.width, mdr.height);\r\n\r\n\t\t\tctx.fillStyle = 'green';\r\n\t\t\tctx.font = fontSize + 'px arials';\r\n\r\n\t\t\tfor (let i = 0; i < drops.length; i++) {\r\n\t\t\t\tlet text = binary[Math.floor(Math.random()*binary.length)];\r\n\t\t\t\tctx.fillText(text, i*fontSize, drops[i]*fontSize);\r\n\r\n\t\t\t\tif (drops[i]*fontSize > mdr.height && Math.random() > 0.975) {\r\n\t\t\t\t\tdrops[i] = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdrops[i]++;\r\n\r\n\t\t\t}\r\n\t\t};\r\n\t\tsetInterval(() => {window.requestAnimationFrame(draw)}, 50);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t<canvas ref='canvas'/>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Canvas;","import React, { Component, Fragment } from 'react';\nimport BinaryInput from './Components/BinaryInput';\nimport DecimalInput from './Components/DecimalInput';\nimport Canvas from './Components/Canvas';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      decimal: 0,\n      binary: 0\n    }\n  }\n\n  resetBinaryInput = (event) => {\n    let input = document.getElementById('bin-number');\n    this.setState({decimal: event.target.value})\n    input.value = '';\n  }\n\n  resetDecimalInput= (event) => {\n    let input = document.getElementById('dec-number');\n    this.setState({binary: 0})\n    input.value = '';\n  }\n\n  onBinInputChange = (event) => {\n    let eventString = event.target.value;\n    let validArray = eventString.split('');\n    // Allow only binary digits in the input\n    for (let i=0; i < eventString.length; i++) {\n      if (validArray[i] !== '0' && validArray[i] !== '1') {\n        validArray.splice(i, 1);\n        event.target.value = validArray.join('');\n      } \n    }\n    // Algorithm for convert binary to decimal\n    let bin = validArray.join('');\n    let decimal= 0;\n     for (let index=bin.length-1; index >=0; index--) {\n    decimal += parseInt(bin[index])*Math.pow(2, bin.length-1-index);\n    }\n     this.setState({decimal: decimal});\n}\n\n  onDecInputChange = (event) => {\n    let eventString = event.target.value;\n    const regex = /[0-9]/g;\n    let validArray = [];\n    let eventArray = eventString.match(regex);\n    // Allow only Positive value decimals\n    if (eventArray === null) {\n      eventArray = validArray;\n      event.target.value = validArray.join('');\n         } else {\n      validArray = eventArray;\n      event.target.value = eventArray.join('');\n    }\n    // Algorithm for convert decimal to binary\n    let decimal = Number(validArray.join(''));\n    let binary = [];\n    const isZero = (e) => e === '0';\n    if (eventString.length === 0) {\n      console.log('1')\n      binary.push(0);\n    } else if (eventString.split('').every(isZero)) {\n      console.log('2', binary);\n      binary.push(0);\n    } else {\n      console.log('3: ', eventString.split(''))\n      binary.pop();\n    }\n    while (decimal > 0) {\n      let rem = decimal % 2;\n      binary.unshift(rem);\n      decimal = Math.floor(decimal/2);\n    }\n  this.setState({binary: binary});\n}\n  \n  render() {\n    return (\n      <Fragment>\n      <Canvas />\n      <h1 \n      id='main-title'\n      style={{color: 'white'}}\n      >\n      Binary - Decimal Convertors\n      </h1>\n      <div id='convertors-container'>\n      <BinaryInput \n      onBinInputChange={this.onBinInputChange}\n      resetBinaryInput={this.resetBinaryInput}\n      decimal={this.state.decimal}\n       />\n      }\n      }\n      <DecimalInput \n      onDecInputChange={this.onDecInputChange}\n      resetDecimalInput={this.resetDecimalInput}\n      binary={this.state.binary}\n      />\n      </div>\n      <div id='reset-div'>\n      </div>\n      <a id='credit'\n      href='https://github.com/AlonJoshua'\n      target='_blank'\n      >\n        Made by Alon Joshua\n      </a>\n      </Fragment>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}